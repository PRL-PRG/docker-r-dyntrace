# *- mode: makefile -*-

# name of the image to build
IMAGE := prlprg/r-common
# user/group control in the image
USERID := $(shell id -u)
GROUPID := $(shell id -g)
USER := $(shell id -un)
GROUP := $(shell id -gn)

# while it looks like a variable it is not, please do not change
R_HOME := /R
R_SCRIPT := $(R_HOME)/bin/Rscript

# extra args passed to the docker run in exec task
DOCKER_RUN_ARGS :=

# CRAN repository  to use e.g. cloud.r-project.org
CRAN_MIRROR := mirrors.nic.cz
# CRAN repository  to use e.g. https://cloud.r-project.org
CRAN_REPO := file:///CRAN
# packages to install as R string vector
CRAN_PACKAGES := available.packages()[,1]
# path where to install CRAN packages (i.e. lib.loc argument to install.packages)
CRAN_LIB := /CRAN/lib
# path where to store CRAN packages source
# for it to work as a mirror it has to end on 'src'
CRAN_SRC := /CRAN/src
CRAN_SRC_EXTRACTED := /CRAN/src-extracted

# path where to install bioconductor packages (i.e. lib.loc argument to install.packages)
BIOC_LIB := /BIOC/lib
# path where to store downloaded packages (i.e. dest argument to biocLite)
BIOC_SRC := /BIOC/src
BIOC_SRC_EXTRACTED := /BIOC/src-extracted
# which bioc packages to install
BIOC_PACKAGES := all_group()

# INSTALL_opts argument to install.packages
INSTALL_OPTS := c('--example', '--install-tests', '--with-keep.source', '--no-multiarch')
# Ncpus argument to install.packages
NCPUS := parallel::detectCores()

.PHONY: compile exec image shell r rscript

image:
	docker build --rm -t $(IMAGE) ..

bioc:
	$(MAKE) rscript \
		SCRIPT=" \
          dir.create('$(BIOC_SRC)'); \
          source('https://bioconductor.org/biocLite.R'); \
          biocLite( \
            $(BIOC_PACKAGES), \
            lib='$(BIOC_LIB)', \
            dest='$(BIOC_SRC)', \
            dependencies=TRUE, \
            build_vignettes=TRUE, \
            INSTALL_opts=$(INSTALL_OPTS), \
            Ncpus=$(NCPUS) \
          ) \
        "

bioc-sources:
	$(MAKE) rscript \
		SCRIPT=" \
          x <- installed.packages('$(BIOC_LIB)'); \
          paths <- file.path('$(BIOC_SRC)', paste0(x[,1], '_', x[,3], '.tar.gz')); \
          writeLines(paths[file.exists(paths)], '$(BIOC_SRC_EXTRACTED)/archives.txt') \
        "
	$(MAKE) exec \
		COMMAND=" \
          parallel --workdir $(BIOC_SRC_EXTRACTED) --bar -a $(BIOC_SRC_EXTRACTED)/archives.txt tar xzf '{}'; \
          rm -f $(BIOC_SRC_EXTRACTED)/archives.txt \
        "

cran-mirror:
	$(MAKE) exec \
		COMMAND=" \
          rsync \
            -rtlzv \
           --delete \
           --include='*.tar.gz' \
           --include='PACKAGES*' \
           --exclude='*/*' \
           '$(CRAN_MIRROR)::CRAN/src/contrib/' $(CRAN_SRC)/contrib \
        "

cran:
	$(MAKE) rscript \
		SCRIPT=" \
          options(repos='$(CRAN_REPO)'); \
          install.packages($(CRAN_PACKAGES), \
            lib='$(CRAN_LIB)', \
            dependencies=TRUE, \
            destdir='$(CRAN_SRC)', \
            INSTALL_opts=$(INSTALL_OPTS), \
            Ncpus=$(NCPUS) \
          )"

cran-sources:
	$(MAKE) rscript \
		SCRIPT=" \
          x <- installed.packages('$(CRAN_LIB)'); \
          paths <- file.path('$(CRAN_SRC)/contrib', paste0(x[,1], '_', x[,3], '.tar.gz')); \
          writeLines(paths[file.exists(paths)], '$(CRAN_SRC_EXTRACTED)/archives.txt') \
        "
	$(MAKE) exec \
		COMMAND=" \
          parallel --workdir $(CRAN_SRC_EXTRACTED) --bar -a $(CRAN_SRC_EXTRACTED)/archives.txt tar xzf '{}'; \
          rm -f $(CRAN_SRC_EXTRACTED)/archives.txt \
        "

exec:
	docker run \
         --rm \
         -ti \
         -v $$(pwd)/R:/R \
         -v r-bioc-lib:$(BIOC_LIB) \
         -v r-bioc-src:$(BIOC_SRC) \
         -v r-bioc-src-extracted:$(BIOC_SRC_EXTRACTED) \
         -v r-cran-mirror:$(CRAN_SRC) \
         -v r-cran-lib:$(CRAN_LIB) \
         -v r-cran-src-extracted:$(CRAN_SRC_EXTRACTED) \
         -e R_LIBS=$(CRAN_LIB):$(BIOC_LIB) \
         -e R_HOME=/R \
         -e USER=$(USER) \
         -e GROUP=$(GROUP) \
         -e USERID=$(USERID) \
         -e GROUPID=$(GROUPID) \
         -e ROOT="TRUE" \
         -e TERM=$(TERM) \
         -e LANGUAGE=$(LANGUAGE) \
         -e LANG=$(LANG) \
         -e LC_ALL=$(LC_ALL) \
		 $(DOCKER_RUN_ARGS) \
         $(IMAGE) \
         $(COMMAND)

zsh:
	[ -f .zhistory ] || touch .zhistory
	$(MAKE) exec COMMAND=zsh DOCKER_RUN_ARGS=" \
         -v $$(pwd)/.zhistory:$(HOME)/.zhistory \
         -v $(HOME)/.zpreztorc:$(HOME)/.zpreztorc:ro \
         -v $(HOME)/.zprezto:$(HOME)/.zprezto:ro \
         -v $(HOME)/.zprofile:$(HOME)/.zprofile:ro \
         -v $(HOME)/.zshenv:$(HOME)/.zshenv:ro \
         -v $(HOME)/.zshrc:$(HOME)/.zshrc:ro \
    "

bash:
	$(MAKE) exec COMMAND=bash

r:
	$(MAKE) exec COMMAND=$(R_HOME)/bin/R

rscript:
	$(MAKE) exec COMMAND="$(R_HOME)/bin/Rscript -e \"$(SCRIPT)\""

clean:
	-rm -fr R
